{"version":3,"sources":["components/Header/Header.jsx","components/Footer/Footer.jsx","components/Main/Main.jsx","components/TestPage/TestPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Footer","href","cityList","Cityes","data","Main","props","handleChange","event","setState","value","target","filter","city","state","length","len","slice","toLowerCase","cityAdd","cityes","includes","newCityList","sort","localStorage","setItem","JSON","stringify","cityDelete","element","choiceListVisibility","choiceList","this","cityesFromStorage","parse","type","onChange","map","onClick","hidden","React","Component","TestPage","useState","count","setCount","useEffect","document","title","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+vCAceA,G,MAVA,WACb,OACE,yBAAKC,UAAU,QACb,kBAAC,IAAD,CAAMA,UAAU,uBAAuBC,GAAG,KAA1C,iDCOSC,G,MAXA,WACb,OACE,yBAAKF,UAAU,UACb,yBAAKA,UAAU,qBACb,6HACA,uBAAGA,UAAU,aAAaG,KAAK,gCAA/B,iCCFFC,EAAWC,EAAOC,KAkGTC,E,YA/Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOD,SAVnB,EAanBE,OAAS,SAACC,GACR,GAAI,EAAKC,MAAMJ,MAAMK,OAAS,EAAK,OAAO,EAC1C,IAAMC,EAAM,EAAKF,MAAMJ,MAAMK,OAC7B,OAAIF,EAAKI,MAAM,EAAGD,GAAKE,gBAAkB,EAAKJ,MAAMJ,MAAMQ,eAhBzC,EAoBnBC,QAAU,SAACN,GACT,IAAI,EAAKC,MAAMM,OAAOC,SAASR,GAA/B,CACA,IAAMS,EAAc,sBAAI,EAAKR,MAAMM,QAAf,CAAuBP,IAAMU,OACjD,EAAKd,SAAS,CAAEC,MAAO,GAAIU,OAAQE,IACnCE,aAAaC,QAAQ,SAAUC,KAAKC,UAAUL,MAxB7B,EA2BnBM,WAAa,SAACf,GACZ,IAAMS,EAAW,YAAO,EAAKR,MAAMM,OAAOR,QAAO,SAAAiB,GAAO,OAAIA,IAAYhB,MACxE,EAAKJ,SAAS,CAAEW,OAAQE,IACxBE,aAAaC,QAAQ,SAAUC,KAAKC,UAAUL,KA9B7B,EAiCnBQ,qBAAuB,kBAAM,EAAKrB,SAAS,CAAEsB,YAAa,EAAKjB,MAAMiB,cA/BnE,EAAKjB,MAAQ,CACXJ,MAAO,GACPU,OAAQ,GACRW,YAAY,GALG,E,iFAoCjB,KAAIC,KAAKlB,MAAMM,OAAOL,OAAS,GAA/B,CACA,IAAMkB,EAAoBP,KAAKQ,MAAMV,aAAaJ,QAClDY,KAAKvB,SAAS,CAAE,OAAUwB,O,+BAGlB,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKnC,UAAU,aACb,yBAAKA,UAAU,aACb,2BAAOqC,KAAK,SAASzB,MAAOsB,KAAKlB,MAAMJ,MAAO0B,SAAUJ,KAAKzB,eAC7D,4BAAQT,UAAU,UAAlB,kCAEEI,EACGU,OAAOoB,KAAKpB,QACZyB,KAAI,SAAAR,GAAO,OACZ,uBACE/B,UAAU,eACVwC,QAAS,kBAAM,EAAKnB,QAAQU,KAE3BA,EACD,0BAAM/B,UAAU,QAAhB,cAKR,yBAAKA,UAAU,UACb,uBAAGwC,QAASN,KAAKF,sBAGbE,KAAKlB,MAAMiB,WACP,0BAAMjC,UAAU,OAAhB,UACA,0BAAMA,UAAU,OAAhB,UAEN,+EAEF,yBACEA,UAAU,cACVyC,QAASP,KAAKlB,MAAMiB,YAEnBC,KAAKlB,MAAMM,OAAOiB,KAAI,SAAAR,GAAO,OAC5B,uBAAG/B,UAAU,uBAEV+B,EACD,0BAAM/B,UAAU,IACVwC,QAAS,kBAAM,EAAKV,WAAWC,KADrC,qBAQV,kBAAC,EAAD,W,GA1FWW,IAAMC,W,gBCSVC,G,MAdE,WAAO,IAAD,EACKC,mBAAS,GADd,mBACdC,EADc,KACPC,EADO,KAKrB,OAHAC,qBAAU,WACRC,SAASC,MAAT,4DAA8BJ,EAA9B,0BAGA,oCACE,qCACA,4FAAgBA,EAAhB,uBACA,4BAAQN,QAAS,kBAAMO,EAASD,EAAQ,KAAxC,uDCOSK,MAbf,WACE,OACE,kBAAC,IAAD,KACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KAAKC,OAAK,EAACC,UAAW/C,IAClC,kBAAC,IAAD,CAAO6C,KAAK,SAASC,OAAK,EAACC,UAAWV,QCA5BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7ee5d8bf.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport {Link} from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <div className='menu'>\n      <Link className='main-menu white bold' to='/'>\n        Главная\n      </Link>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => {\n  return(\n    <div className='footer'>\n      <div className='white main-footer'>\n        <span>Сергей Габдуллин</span>\n        <a className='black mail' href=\"mailto:s.gabdullin@gmail.com\">&nbsp;S.Gabdullin@gmail.com</a>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport './Main.css';\nimport Cityes from './Cityes';\nimport Header from \"../Header/Header\";\nimport Footer from \"../Footer/Footer\";\n\nconst cityList = Cityes.data;\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      cityes: [],\n      choiceList: true,\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  };\n\n  filter = (city) => {\n    if (this.state.value.length < 3) { return true; }\n    const len = this.state.value.length;\n    if (city.slice(0, len).toLowerCase() === this.state.value.toLowerCase()) { return true; }\n    return false;\n  };\n\n  cityAdd = (city) => {\n    if (this.state.cityes.includes(city)) { return; }\n    const newCityList = [...this.state.cityes, city].sort();\n    this.setState({ value: '', cityes: newCityList });\n    localStorage.setItem('cityes', JSON.stringify(newCityList));\n  };\n\n  cityDelete = (city) => {\n    const newCityList = [...this.state.cityes.filter(element => element !== city)];\n    this.setState({ cityes: newCityList });\n    localStorage.setItem('cityes', JSON.stringify(newCityList));\n  };\n\n  choiceListVisibility = () => this.setState({ choiceList: !this.state.choiceList });\n\n  componentDidMount() {\n    if (this.state.cityes.length > 0) { return; }\n    const cityesFromStorage = JSON.parse(localStorage.cityes);\n    this.setState({ 'cityes': cityesFromStorage });\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <div className='container'>\n          <div className='city-list'>\n            <input type=\"search\" value={this.state.value} onChange={this.handleChange} />\n            <button className='button'>Поиск</button>\n            {\n              cityList\n                .filter(this.filter)\n                .map(element => (\n                <p\n                  className='list-element'\n                  onClick={() => this.cityAdd(element)}\n                >\n                  {element}\n                  <span className='plus'>&nbsp;+</span>\n                </p>\n                ))\n            }\n          </div>\n          <div className='choice'>\n            <p onClick={this.choiceListVisibility}\n            >\n              {\n                this.state.choiceList\n                  ? <span className='red'>&#9660;</span>\n                  : <span className='red'>&#9658;</span>\n              }\n              <b>&nbsp;Выбрано:</b>\n            </p>\n            <div\n              className='choice-list'\n              hidden={!this.state.choiceList}\n            >\n              {this.state.cityes.map(element => (\n                <p className='choice-list-element'\n                >\n                  {element}\n                  <span className='x'\n                        onClick={() => this.cityDelete(element)}\n                  >&nbsp;&#10006;</span>\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default Main;","import React, { useState, useEffect } from 'react';\nimport './TestPage.css';\n\nconst TestPage = () => {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `Вы нажали ${count} раз`;\n  });\n  return (\n    <>\n      <p>Hello!</p>\n      <p>Вы кликнули {count} раз</p>\n      <button onClick={() => setCount(count + 1)}>Кликнуть</button>\n    </>\n  );\n};\n\nexport default TestPage;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Main from './components/Main/Main';\nimport './App.css';\nimport TestPage from \"./components/TestPage/TestPage\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <>\n        <Switch>\n          <Route path='#/' exact component={Main} />\n          <Route path='#/test' exact component={TestPage} />\n        </Switch>\n      </>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}